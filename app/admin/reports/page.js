"use client"

import { Textarea } from "@/components/ui/textarea"

import { useState } from "react"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Badge } from "@/components/ui/badge"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { Label } from "@/components/ui/label"
import { Checkbox } from "@/components/ui/checkbox"
import { Separator } from "@/components/ui/separator"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import {
  BarChart3,
  LineChart,
  PieChart,
  Download,
  FileText,
  Settings,
  Bell,
  ArrowUpRight,
  ArrowDownRight,
  FileSpreadsheet,
  FileIcon as FilePdf,
  Mail,
  LayoutDashboard,
  Plus,
  Save,
  RefreshCw,
  Search,
  Trash2,
} from "lucide-react"

// Mock data for charts and reports
const mockRevenueData = [
  { month: "Jan", electricity: 45000, water: 32000 },
  { month: "Feb", electricity: 48000, water: 34000 },
  { month: "Mar", electricity: 47000, water: 33500 },
  { month: "Apr", electricity: 49000, water: 35000 },
  { month: "May", electricity: 52000, water: 36500 },
  { month: "Jun", electricity: 55000, water: 38000 },
]

const mockPaymentMethodData = [
  { method: "Credit Card", count: 1250, percentage: 62.5 },
  { method: "Bank Transfer", count: 450, percentage: 22.5 },
  { method: "E-Wallet", count: 300, percentage: 15 },
]

const mockCustomerGrowthData = [
  { month: "Jan", customers: 1150 },
  { month: "Feb", customers: 1180 },
  { month: "Mar", customers: 1210 },
  { month: "Apr", customers: 1230 },
  { month: "May", customers: 1260 },
  { month: "Jun", customers: 1290 },
]

const mockBillStatusData = [
  { status: "Paid", count: 1850, amount: 142500 },
  { status: "Pending", count: 320, amount: 24800 },
  { status: "Overdue", count: 130, amount: 9750 },
]

const mockUsageData = [
  { category: "Residential", electricity: 320000, water: 1800000 },
  { category: "Commercial", electricity: 450000, water: 1200000 },
  { category: "Industrial", electricity: 680000, water: 950000 },
  { category: "Agricultural", electricity: 120000, water: 2500000 },
]

const mockAlerts = [
  {
    id: 1,
    type: "revenue_drop",
    title: "Revenue Drop Detected",
    description: "Revenue from commercial customers dropped by 15% compared to last month",
    severity: "high",
    date: "2024-01-15",
    read: false,
  },
  {
    id: 2,
    type: "payment_spike",
    title: "Unusual Payment Activity",
    description: "Spike in failed payment attempts detected in the last 24 hours",
    severity: "medium",
    date: "2024-01-14",
    read: false,
  },
  {
    id: 3,
    type: "usage_anomaly",
    title: "Usage Anomaly",
    description: "Unusual water consumption pattern detected in North District",
    severity: "low",
    date: "2024-01-12",
    read: true,
  },
]

const mockPredefinedReports = [
  {
    id: "monthly-revenue",
    name: "Monthly Revenue Report",
    description: "Summary of revenue collected by service type and customer category",
    category: "financial",
    lastGenerated: "2024-01-10",
    format: "excel",
  },
  {
    id: "payment-reconciliation",
    name: "Payment Reconciliation Report",
    description: "Detailed report of payments matched with bills",
    category: "financial",
    lastGenerated: "2024-01-08",
    format: "excel",
  },
  {
    id: "customer-usage",
    name: "Customer Usage Analysis",
    description: "Analysis of electricity and water consumption patterns",
    category: "usage",
    lastGenerated: "2024-01-05",
    format: "pdf",
  },
  {
    id: "overdue-bills",
    name: "Overdue Bills Summary",
    description: "List of all overdue bills with customer details",
    category: "billing",
    lastGenerated: "2024-01-12",
    format: "excel",
  },
  {
    id: "tariff-performance",
    name: "Tariff Performance Report",
    description: "Analysis of revenue generated by different tariff structures",
    category: "financial",
    lastGenerated: "2023-12-28",
    format: "pdf",
  },
  {
    id: "customer-growth",
    name: "Customer Growth Report",
    description: "Monthly customer acquisition and churn analysis",
    category: "customer",
    lastGenerated: "2023-12-20",
    format: "excel",
  },
]

// Mock data for custom report fields
const availableReportFields = {
  customer: [
    { id: "customer_id", name: "Customer ID", selected: true },
    { id: "customer_name", name: "Customer Name", selected: true },
    { id: "email", name: "Email", selected: true },
    { id: "phone", name: "Phone Number", selected: false },
    { id: "address", name: "Address", selected: false },
    { id: "join_date", name: "Join Date", selected: true },
    { id: "customer_category", name: "Customer Category", selected: true },
  ],
  billing: [
    { id: "bill_id", name: "Bill ID", selected: true },
    { id: "bill_date", name: "Bill Date", selected: true },
    { id: "due_date", name: "Due Date", selected: true },
    { id: "bill_amount", name: "Bill Amount", selected: true },
    { id: "bill_status", name: "Bill Status", selected: true },
    { id: "service_type", name: "Service Type", selected: true },
    { id: "consumption", name: "Consumption", selected: true },
    { id: "tariff_applied", name: "Tariff Applied", selected: false },
    { id: "fixed_charges", name: "Fixed Charges", selected: false },
    { id: "taxes", name: "Taxes", selected: false },
  ],
  payment: [
    { id: "payment_id", name: "Payment ID", selected: true },
    { id: "payment_date", name: "Payment Date", selected: true },
    { id: "payment_amount", name: "Payment Amount", selected: true },
    { id: "payment_method", name: "Payment Method", selected: true },
    { id: "payment_status", name: "Payment Status", selected: true },
    { id: "reference_number", name: "Reference Number", selected: false },
    { id: "bill_id", name: "Bill ID", selected: true },
  ],
}

export default function ReportsAndAnalyticsPage() {
  const [activeTab, setActiveTab] = useState("dashboard")
  const [dateRange, setDateRange] = useState("last-30-days")
  const [customStartDate, setCustomStartDate] = useState("")
  const [customEndDate, setCustomEndDate] = useState("")
  const [selectedReportType, setSelectedReportType] = useState("monthly-revenue")
  const [isGeneratingReport, setIsGeneratingReport] = useState(false)
  const [reportProgress, setReportProgress] = useState(0)
  const [isReportDialogOpen, setIsReportDialogOpen] = useState(false)
  const [isAlertDialogOpen, setIsAlertDialogOpen] = useState(false)
  const [isCreateAlertDialogOpen, setIsCreateAlertDialogOpen] = useState(false)
  const [selectedAlert, setSelectedAlert] = useState(null)
  const [alerts, setAlerts] = useState(mockAlerts)
  const [customReportFields, setCustomReportFields] = useState(availableReportFields)
  const [customReportSettings, setCustomReportSettings] = useState({
    name: "New Custom Report",
    description: "",
    type: "tabular",
    format: "excel",
    dateRange: "last-30-days",
    customerSegment: "all",
    serviceType: "all",
  })
  const [dashboardLayout, setDashboardLayout] = useState([
    "revenue-trend",
    "payment-methods",
    "bill-status",
    "customer-growth",
    "usage-by-category",
    "recent-alerts",
  ])

  const handleGenerateReport = () => {
    setIsGeneratingReport(true)
    setReportProgress(0)

    // Simulate report generation
    const interval = setInterval(() => {
      setReportProgress((prev) => {
        const newProgress = prev + 10
        if (newProgress >= 100) {
          clearInterval(interval)
          setIsGeneratingReport(false)
          return 100
        }
        return newProgress
      })
    }, 300)
  }

  const handleExportReport = (format) => {
    // In a real application, this would trigger a download of the report in the specified format
    console.log(`Exporting report in ${format} format`)
  }

  const handleViewAlert = (alert) => {
    setSelectedAlert(alert)
    setIsAlertDialogOpen(true)

    // Mark alert as read
    if (!alert.read) {
      const updatedAlerts = alerts.map((a) => (a.id === alert.id ? { ...a, read: true } : a))
      setAlerts(updatedAlerts)
    }
  }

  const handleToggleFieldSelection = (category, fieldId) => {
    setCustomReportFields({
      ...customReportFields,
      [category]: customReportFields[category].map((field) =>
        field.id === fieldId ? { ...field, selected: !field.selected } : field,
      ),
    })
  }

  const handleSaveCustomReport = () => {
    // In a real application, this would save the custom report configuration
    console.log("Saving custom report:", customReportSettings)
    console.log("Selected fields:", customReportFields)
  }

  const getAlertSeverityBadge = (severity) => {
    switch (severity) {
      case "high":
        return <Badge variant="destructive">High</Badge>
      case "medium":
        return <Badge variant="secondary">Medium</Badge>
      case "low":
        return <Badge variant="outline">Low</Badge>
      default:
        return <Badge variant="outline">{severity}</Badge>
    }
  }

  const getFormatIcon = (format) => {
    switch (format) {
      case "excel":
        return <FileSpreadsheet className="h-4 w-4 text-green-600" />
      case "pdf":
        return <FilePdf className="h-4 w-4 text-red-600" />
      case "csv":
        return <FileText className="h-4 w-4 text-blue-600" />
      default:
        return <FileText className="h-4 w-4" />
    }
  }

  const unreadAlertsCount = alerts.filter((alert) => !alert.read).length

  return (
    <>
      <div className="space-y-6">
        <div className="flex justify-between items-center">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">Reports & Analytics</h1>
            <p className="text-gray-600">Monitor and analyze key performance indicators</p>
          </div>
          <div className="flex space-x-3">
            <Button variant="outline" onClick={() => setIsCreateAlertDialogOpen(true)}>
              <Bell className="h-4 w-4 mr-2" />
              Alerts
              {unreadAlertsCount > 0 && (
                <Badge variant="destructive" className="ml-2">
                  {unreadAlertsCount}
                </Badge>
              )}
            </Button>
            <Button onClick={() => setIsReportDialogOpen(true)}>
              <FileText className="h-4 w-4 mr-2" />
              Generate Report
            </Button>
          </div>
        </div>

        {/* Date Range Selector */}
        <Card>
          <CardHeader className="pb-3">
            <div className="flex justify-between items-center">
              <CardTitle className="text-base">Date Range</CardTitle>
              <Button variant="outline" size="sm" onClick={() => setActiveTab("dashboard")}>
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh Data
              </Button>
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-6 gap-4">
              <div className="md:col-span-4 flex flex-wrap gap-2">
                <Button
                  variant={dateRange === "today" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("today")}
                >
                  Today
                </Button>
                <Button
                  variant={dateRange === "yesterday" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("yesterday")}
                >
                  Yesterday
                </Button>
                <Button
                  variant={dateRange === "last-7-days" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("last-7-days")}
                >
                  Last 7 Days
                </Button>
                <Button
                  variant={dateRange === "last-30-days" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("last-30-days")}
                >
                  Last 30 Days
                </Button>
                <Button
                  variant={dateRange === "this-month" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("this-month")}
                >
                  This Month
                </Button>
                <Button
                  variant={dateRange === "last-month" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("last-month")}
                >
                  Last Month
                </Button>
                <Button
                  variant={dateRange === "custom" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setDateRange("custom")}
                >
                  Custom Range
                </Button>
              </div>
              {dateRange === "custom" && (
                <div className="md:col-span-2 flex items-center gap-2">
                  <div>
                    <Input
                      type="date"
                      value={customStartDate}
                      onChange={(e) => setCustomStartDate(e.target.value)}
                      className="h-9"
                    />
                  </div>
                  <span>to</span>
                  <div>
                    <Input
                      type="date"
                      value={customEndDate}
                      onChange={(e) => setCustomEndDate(e.target.value)}
                      className="h-9"
                    />
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

        {/* Main Content Tabs */}
        <Tabs value={activeTab} onValueChange={setActiveTab}>
          <TabsList className="grid grid-cols-4 mb-4">
            <TabsTrigger value="dashboard">
              <LayoutDashboard className="h-4 w-4 mr-2" />
              Dashboard
            </TabsTrigger>
            <TabsTrigger value="reports">
              <FileText className="h-4 w-4 mr-2" />
              Reports
            </TabsTrigger>
            <TabsTrigger value="custom-reports">
              <Settings className="h-4 w-4 mr-2" />
              Custom Reports
            </TabsTrigger>
            <TabsTrigger value="alerts">
              <Bell className="h-4 w-4 mr-2" />
              Alerts
              {unreadAlertsCount > 0 && (
                <Badge variant="destructive" className="ml-2">
                  {unreadAlertsCount}
                </Badge>
              )}
            </TabsTrigger>
          </TabsList>

          {/* Dashboard Tab */}
          <TabsContent value="dashboard" className="space-y-6">
            {/* KPI Summary */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Total Revenue</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">$283,500</div>
                  <div className="flex items-center text-xs text-green-600 mt-1">
                    <ArrowUpRight className="h-3 w-3 mr-1" />
                    <span>8.2% from last period</span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Bills Issued</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">2,300</div>
                  <div className="flex items-center text-xs text-green-600 mt-1">
                    <ArrowUpRight className="h-3 w-3 mr-1" />
                    <span>3.5% from last period</span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Payment Success Rate</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">94.5%</div>
                  <div className="flex items-center text-xs text-red-600 mt-1">
                    <ArrowDownRight className="h-3 w-3 mr-1" />
                    <span>1.2% from last period</span>
                  </div>
                </CardContent>
              </Card>
              <Card>
                <CardHeader className="pb-2">
                  <CardTitle className="text-sm font-medium">Total Customers</CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="text-2xl font-bold">1,290</div>
                  <div className="flex items-center text-xs text-green-600 mt-1">
                    <ArrowUpRight className="h-3 w-3 mr-1" />
                    <span>2.3% from last period</span>
                  </div>
                </CardContent>
              </Card>
            </div>

            {/* Charts and Visualizations */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Revenue Trend Chart */}
              {dashboardLayout.includes("revenue-trend") && (
                <Card className="col-span-1 lg:col-span-2">
                  <CardHeader>
                    <div className="flex justify-between items-center">
                      <CardTitle className="text-lg">Revenue Trend</CardTitle>
                      <Select defaultValue="6-months">
                        <SelectTrigger className="w-36 h-8">
                          <SelectValue />
                        </SelectTrigger>
                        <SelectContent>
                          <SelectItem value="30-days">Last 30 Days</SelectItem>
                          <SelectItem value="3-months">Last 3 Months</SelectItem>
                          <SelectItem value="6-months">Last 6 Months</SelectItem>
                          <SelectItem value="12-months">Last 12 Months</SelectItem>
                        </SelectContent>
                      </Select>
                    </div>
                    <CardDescription>Monthly revenue by service type</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-80 flex items-center justify-center bg-gray-50 rounded-md">
                      <div className="text-center p-4">
                        <LineChart className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500">Revenue Trend Chart</p>
                        <p className="text-sm text-gray-400 mt-1">
                          (Chart visualization would be rendered here in a real application)
                        </p>
                      </div>
                    </div>
                    <div className="flex justify-center mt-4 space-x-6">
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                        <span className="text-sm">Electricity</span>
                      </div>
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-cyan-500 rounded-full mr-2"></div>
                        <span className="text-sm">Water</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Payment Methods Chart */}
              {dashboardLayout.includes("payment-methods") && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Payment Methods</CardTitle>
                    <CardDescription>Distribution of payment methods used</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64 flex items-center justify-center bg-gray-50 rounded-md">
                      <div className="text-center p-4">
                        <PieChart className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500">Payment Methods Chart</p>
                        <p className="text-sm text-gray-400 mt-1">
                          (Chart visualization would be rendered here in a real application)
                        </p>
                      </div>
                    </div>
                    <div className="mt-4 space-y-2">
                      {mockPaymentMethodData.map((item, index) => (
                        <div key={index} className="flex justify-between items-center">
                          <div className="flex items-center">
                            <div
                              className={`w-3 h-3 rounded-full mr-2 ${
                                index === 0
                                  ? "bg-blue-500"
                                  : index === 1
                                    ? "bg-green-500"
                                    : index === 2
                                      ? "bg-purple-500"
                                      : "bg-gray-500"
                              }`}
                            ></div>
                            <span className="text-sm">{item.method}</span>
                          </div>
                          <div className="text-sm font-medium">{item.percentage}%</div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Bill Status Chart */}
              {dashboardLayout.includes("bill-status") && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Bill Status</CardTitle>
                    <CardDescription>Overview of bill payment status</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64 flex items-center justify-center bg-gray-50 rounded-md">
                      <div className="text-center p-4">
                        <BarChart3 className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500">Bill Status Chart</p>
                        <p className="text-sm text-gray-400 mt-1">
                          (Chart visualization would be rendered here in a real application)
                        </p>
                      </div>
                    </div>
                    <div className="mt-4 space-y-2">
                      {mockBillStatusData.map((item, index) => (
                        <div key={index} className="flex justify-between items-center">
                          <div className="flex items-center">
                            <div
                              className={`w-3 h-3 rounded-full mr-2 ${
                                item.status === "Paid"
                                  ? "bg-green-500"
                                  : item.status === "Pending"
                                    ? "bg-amber-500"
                                    : "bg-red-500"
                              }`}
                            ></div>
                            <span className="text-sm">{item.status}</span>
                          </div>
                          <div className="text-sm font-medium">${item.amount.toLocaleString()}</div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Customer Growth Chart */}
              {dashboardLayout.includes("customer-growth") && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Customer Growth</CardTitle>
                    <CardDescription>Monthly customer acquisition</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64 flex items-center justify-center bg-gray-50 rounded-md">
                      <div className="text-center p-4">
                        <LineChart className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500">Customer Growth Chart</p>
                        <p className="text-sm text-gray-400 mt-1">
                          (Chart visualization would be rendered here in a real application)
                        </p>
                      </div>
                    </div>
                    <div className="mt-4">
                      <div className="flex justify-between items-center">
                        <span className="text-sm text-gray-500">Current Total</span>
                        <span className="text-sm font-medium">1,290 customers</span>
                      </div>
                      <div className="flex justify-between items-center mt-1">
                        <span className="text-sm text-gray-500">Growth Rate</span>
                        <span className="text-sm font-medium text-green-600">+2.3% monthly</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Usage by Category Chart */}
              {dashboardLayout.includes("usage-by-category") && (
                <Card>
                  <CardHeader>
                    <CardTitle className="text-lg">Usage by Category</CardTitle>
                    <CardDescription>Consumption by customer category</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="h-64 flex items-center justify-center bg-gray-50 rounded-md">
                      <div className="text-center p-4">
                        <BarChart3 className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                        <p className="text-gray-500">Usage by Category Chart</p>
                        <p className="text-sm text-gray-400 mt-1">
                          (Chart visualization would be rendered here in a real application)
                        </p>
                      </div>
                    </div>
                    <div className="flex justify-center mt-4 space-x-6">
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-yellow-500 rounded-full mr-2"></div>
                        <span className="text-sm">Electricity</span>
                      </div>
                      <div className="flex items-center">
                        <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                        <span className="text-sm">Water</span>
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {/* Recent Alerts */}
              {dashboardLayout.includes("recent-alerts") && (
                <Card>
                  <CardHeader>
                    <div className="flex justify-between items-center">
                      <CardTitle className="text-lg">Recent Alerts</CardTitle>
                      <Button variant="ghost" size="sm" onClick={() => setActiveTab("alerts")}>
                        View All
                      </Button>
                    </div>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {alerts.slice(0, 3).map((alert) => (
                        <div
                          key={alert.id}
                          className={`p-3 border rounded-lg ${!alert.read ? "bg-blue-50 border-blue-200" : ""}`}
                        >
                          <div className="flex justify-between items-start">
                            <div>
                              <h4 className="font-medium text-sm">{alert.title}</h4>
                              <p className="text-xs text-gray-500 mt-1">{alert.description}</p>
                            </div>
                            <div>{getAlertSeverityBadge(alert.severity)}</div>
                          </div>
                          <div className="flex justify-between items-center mt-2">
                            <span className="text-xs text-gray-500">{alert.date}</span>
                            <Button variant="ghost" size="sm" onClick={() => handleViewAlert(alert)}>
                              View Details
                            </Button>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
              )}
            </div>

            {/* Dashboard Customization */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Dashboard Customization</CardTitle>
                <CardDescription>Customize your dashboard layout and widgets</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div>
                    <Label className="mb-2 block">Select Widgets to Display</Label>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="revenue-trend"
                          checked={dashboardLayout.includes("revenue-trend")}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setDashboardLayout([...dashboardLayout, "revenue-trend"])
                            } else {
                              setDashboardLayout(dashboardLayout.filter((item) => item !== "revenue-trend"))
                            }
                          }}
                        />
                        <Label htmlFor="revenue-trend">Revenue Trend</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="payment-methods"
                          checked={dashboardLayout.includes("payment-methods")}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setDashboardLayout([...dashboardLayout, "payment-methods"])
                            } else {
                              setDashboardLayout(dashboardLayout.filter((item) => item !== "payment-methods"))
                            }
                          }}
                        />
                        <Label htmlFor="payment-methods">Payment Methods</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="bill-status"
                          checked={dashboardLayout.includes("bill-status")}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setDashboardLayout([...dashboardLayout, "bill-status"])
                            } else {
                              setDashboardLayout(dashboardLayout.filter((item) => item !== "bill-status"))
                            }
                          }}
                        />
                        <Label htmlFor="bill-status">Bill Status</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="customer-growth"
                          checked={dashboardLayout.includes("customer-growth")}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setDashboardLayout([...dashboardLayout, "customer-growth"])
                            } else {
                              setDashboardLayout(dashboardLayout.filter((item) => item !== "customer-growth"))
                            }
                          }}
                        />
                        <Label htmlFor="customer-growth">Customer Growth</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="usage-by-category"
                          checked={dashboardLayout.includes("usage-by-category")}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setDashboardLayout([...dashboardLayout, "usage-by-category"])
                            } else {
                              setDashboardLayout(dashboardLayout.filter((item) => item !== "usage-by-category"))
                            }
                          }}
                        />
                        <Label htmlFor="usage-by-category">Usage by Category</Label>
                      </div>
                      <div className="flex items-center space-x-2">
                        <Checkbox
                          id="recent-alerts"
                          checked={dashboardLayout.includes("recent-alerts")}
                          onCheckedChange={(checked) => {
                            if (checked) {
                              setDashboardLayout([...dashboardLayout, "recent-alerts"])
                            } else {
                              setDashboardLayout(dashboardLayout.filter((item) => item !== "recent-alerts"))
                            }
                          }}
                        />
                        <Label htmlFor="recent-alerts">Recent Alerts</Label>
                      </div>
                    </div>
                  </div>

                  <div className="flex justify-end">
                    <Button>
                      <Save className="h-4 w-4 mr-2" />
                      Save Layout
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Reports Tab */}
          <TabsContent value="reports" className="space-y-6">
            {/* Predefined Reports */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Predefined Reports</CardTitle>
                <CardDescription>Standard reports for common business needs</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center space-x-4">
                    <Select defaultValue="all">
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Category" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Categories</SelectItem>
                        <SelectItem value="financial">Financial</SelectItem>
                        <SelectItem value="billing">Billing</SelectItem>
                        <SelectItem value="usage">Usage</SelectItem>
                        <SelectItem value="customer">Customer</SelectItem>
                      </SelectContent>
                    </Select>
                    <div className="relative flex-1">
                      <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                      <Input placeholder="Search reports..." className="pl-10" />
                    </div>
                  </div>

                  <div className="overflow-x-auto">
                    <Table>
                      <TableHeader>
                        <TableRow>
                          <TableHead>Report Name</TableHead>
                          <TableHead>Category</TableHead>
                          <TableHead>Description</TableHead>
                          <TableHead>Last Generated</TableHead>
                          <TableHead>Format</TableHead>
                          <TableHead>Actions</TableHead>
                        </TableRow>
                      </TableHeader>
                      <TableBody>
                        {mockPredefinedReports.map((report) => (
                          <TableRow key={report.id}>
                            <TableCell className="font-medium">{report.name}</TableCell>
                            <TableCell className="capitalize">{report.category}</TableCell>
                            <TableCell>{report.description}</TableCell>
                            <TableCell>{report.lastGenerated}</TableCell>
                            <TableCell>
                              <div className="flex items-center">
                                {getFormatIcon(report.format)}
                                <span className="ml-2 capitalize">{report.format}</span>
                              </div>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center space-x-2">
                                <Button
                                  variant="outline"
                                  size="sm"
                                  onClick={() => {
                                    setSelectedReportType(report.id)
                                    setIsReportDialogOpen(true)
                                  }}
                                >
                                  Generate
                                </Button>
                                <Button variant="outline" size="sm">
                                  <Download className="h-4 w-4" />
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        ))}
                      </TableBody>
                    </Table>
                  </div>
                </div>
              </CardContent>
            </Card>

            {/* Report Generation History */}
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Report Generation History</CardTitle>
                <CardDescription>Recently generated reports</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Report Name</TableHead>
                        <TableHead>Generated On</TableHead>
                        <TableHead>Generated By</TableHead>
                        <TableHead>Parameters</TableHead>
                        <TableHead>Format</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell className="font-medium">Monthly Revenue Report</TableCell>
                        <TableCell>2024-01-10 09:45 AM</TableCell>
                        <TableCell>admin@utility.com</TableCell>
                        <TableCell>Dec 2023, All Categories</TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <FileSpreadsheet className="h-4 w-4 text-green-600" />
                            <span className="ml-2">Excel</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              <Download className="h-4 w-4" />
                            </Button>
                            <Button variant="outline" size="sm">
                              <Mail className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Overdue Bills Summary</TableCell>
                        <TableCell>2024-01-08 02:30 PM</TableCell>
                        <TableCell>admin@utility.com</TableCell>
                        <TableCell>As of Jan 8, 2024</TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <FilePdf className="h-4 w-4 text-red-600" />
                            <span className="ml-2">PDF</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              <Download className="h-4 w-4" />
                            </Button>
                            <Button variant="outline" size="sm">
                              <Mail className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Customer Usage Analysis</TableCell>
                        <TableCell>2024-01-05 11:15 AM</TableCell>
                        <TableCell>admin@utility.com</TableCell>
                        <TableCell>Q4 2023, Residential</TableCell>
                        <TableCell>
                          <div className="flex items-center">
                            <FileSpreadsheet className="h-4 w-4 text-green-600" />
                            <span className="ml-2">Excel</span>
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              <Download className="h-4 w-4" />
                            </Button>
                            <Button variant="outline" size="sm">
                              <Mail className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Custom Reports Tab */}
          <TabsContent value="custom-reports" className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Create Custom Report</CardTitle>
                <CardDescription>Design your own report with custom fields and filters</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="report-name">Report Name</Label>
                        <Input
                          id="report-name"
                          value={customReportSettings.name}
                          onChange={(e) => setCustomReportSettings({ ...customReportSettings, name: e.target.value })}
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="report-description">Description</Label>
                        <Textarea
                          id="report-description"
                          value={customReportSettings.description}
                          onChange={(e) =>
                            setCustomReportSettings({ ...customReportSettings, description: e.target.value })
                          }
                        />
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="report-type">Report Type</Label>
                        <Select
                          value={customReportSettings.type}
                          onValueChange={(value) => setCustomReportSettings({ ...customReportSettings, type: value })}
                        >
                          <SelectTrigger id="report-type">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="tabular">Tabular Report</SelectItem>
                            <SelectItem value="summary">Summary Report</SelectItem>
                            <SelectItem value="chart">Chart/Graph</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="report-format">Output Format</Label>
                        <Select
                          value={customReportSettings.format}
                          onValueChange={(value) => setCustomReportSettings({ ...customReportSettings, format: value })}
                        >
                          <SelectTrigger id="report-format">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="excel">Excel (.xlsx)</SelectItem>
                            <SelectItem value="csv">CSV</SelectItem>
                            <SelectItem value="pdf">PDF</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                    <div className="space-y-4">
                      <div className="space-y-2">
                        <Label htmlFor="date-range">Date Range</Label>
                        <Select
                          value={customReportSettings.dateRange}
                          onValueChange={(value) =>
                            setCustomReportSettings({ ...customReportSettings, dateRange: value })
                          }
                        >
                          <SelectTrigger id="date-range">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="last-30-days">Last 30 Days</SelectItem>
                            <SelectItem value="last-90-days">Last 90 Days</SelectItem>
                            <SelectItem value="this-month">This Month</SelectItem>
                            <SelectItem value="last-month">Last Month</SelectItem>
                            <SelectItem value="this-quarter">This Quarter</SelectItem>
                            <SelectItem value="last-quarter">Last Quarter</SelectItem>
                            <SelectItem value="this-year">This Year</SelectItem>
                            <SelectItem value="custom">Custom Range</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="customer-segment">Customer Segment</Label>
                        <Select
                          value={customReportSettings.customerSegment}
                          onValueChange={(value) =>
                            setCustomReportSettings({ ...customReportSettings, customerSegment: value })
                          }
                        >
                          <SelectTrigger id="customer-segment">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Customers</SelectItem>
                            <SelectItem value="residential">Residential</SelectItem>
                            <SelectItem value="commercial">Commercial</SelectItem>
                            <SelectItem value="industrial">Industrial</SelectItem>
                            <SelectItem value="agricultural">Agricultural</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                      <div className="space-y-2">
                        <Label htmlFor="service-type">Service Type</Label>
                        <Select
                          value={customReportSettings.serviceType}
                          onValueChange={(value) =>
                            setCustomReportSettings({ ...customReportSettings, serviceType: value })
                          }
                        >
                          <SelectTrigger id="service-type">
                            <SelectValue />
                          </SelectTrigger>
                          <SelectContent>
                            <SelectItem value="all">All Services</SelectItem>
                            <SelectItem value="electricity">Electricity</SelectItem>
                            <SelectItem value="water">Water</SelectItem>
                          </SelectContent>
                        </Select>
                      </div>
                    </div>
                  </div>

                  <Separator />

                  <div className="space-y-4">
                    <h3 className="text-lg font-medium">Select Fields to Include</h3>

                    <Tabs defaultValue="customer">
                      <TabsList>
                        <TabsTrigger value="customer">Customer Fields</TabsTrigger>
                        <TabsTrigger value="billing">Billing Fields</TabsTrigger>
                        <TabsTrigger value="payment">Payment Fields</TabsTrigger>
                      </TabsList>
                      <TabsContent value="customer" className="mt-4">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                          {customReportFields.customer.map((field) => (
                            <div key={field.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={field.id}
                                checked={field.selected}
                                onCheckedChange={() => handleToggleFieldSelection("customer", field.id)}
                              />
                              <Label htmlFor={field.id}>{field.name}</Label>
                            </div>
                          ))}
                        </div>
                      </TabsContent>
                      <TabsContent value="billing" className="mt-4">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                          {customReportFields.billing.map((field) => (
                            <div key={field.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={field.id}
                                checked={field.selected}
                                onCheckedChange={() => handleToggleFieldSelection("billing", field.id)}
                              />
                              <Label htmlFor={field.id}>{field.name}</Label>
                            </div>
                          ))}
                        </div>
                      </TabsContent>
                      <TabsContent value="payment" className="mt-4">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                          {customReportFields.payment.map((field) => (
                            <div key={field.id} className="flex items-center space-x-2">
                              <Checkbox
                                id={field.id}
                                checked={field.selected}
                                onCheckedChange={() => handleToggleFieldSelection("payment", field.id)}
                              />
                              <Label htmlFor={field.id}>{field.name}</Label>
                            </div>
                          ))}
                        </div>
                      </TabsContent>
                    </Tabs>
                  </div>

                  <div className="flex justify-end space-x-3">
                    <Button variant="outline">Preview Report</Button>
                    <Button onClick={handleSaveCustomReport}>
                      <Save className="h-4 w-4 mr-2" />
                      Save Report
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Saved Custom Reports</CardTitle>
                <CardDescription>Your previously created custom reports</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="overflow-x-auto">
                  <Table>
                    <TableHeader>
                      <TableRow>
                        <TableHead>Report Name</TableHead>
                        <TableHead>Description</TableHead>
                        <TableHead>Type</TableHead>
                        <TableHead>Created On</TableHead>
                        <TableHead>Actions</TableHead>
                      </TableRow>
                    </TableHeader>
                    <TableBody>
                      <TableRow>
                        <TableCell className="font-medium">High Consumption Customers</TableCell>
                        <TableCell>Customers with above-average consumption</TableCell>
                        <TableCell>Tabular Report</TableCell>
                        <TableCell>2023-12-15</TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              Edit
                            </Button>
                            <Button variant="outline" size="sm">
                              Generate
                            </Button>
                            <Button variant="outline" size="sm">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Payment Method Analysis</TableCell>
                        <TableCell>Analysis of payment methods by customer segment</TableCell>
                        <TableCell>Chart/Graph</TableCell>
                        <TableCell>2023-12-10</TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              Edit
                            </Button>
                            <Button variant="outline" size="sm">
                              Generate
                            </Button>
                            <Button variant="outline" size="sm">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                      <TableRow>
                        <TableCell className="font-medium">Seasonal Usage Patterns</TableCell>
                        <TableCell>Quarterly usage patterns by customer type</TableCell>
                        <TableCell>Summary Report</TableCell>
                        <TableCell>2023-11-28</TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm">
                              Edit
                            </Button>
                            <Button variant="outline" size="sm">
                              Generate
                            </Button>
                            <Button variant="outline" size="sm">
                              <Trash2 className="h-4 w-4" />
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    </TableBody>
                  </Table>
                </div>
              </CardContent>
            </Card>
          </TabsContent>

          {/* Alerts Tab */}
          <TabsContent value="alerts" className="space-y-6">
            <Card>
              <CardHeader>
                <div className="flex justify-between items-center">
                  <CardTitle className="text-lg">Alert Management</CardTitle>
                  <Button onClick={() => setIsCreateAlertDialogOpen(true)}>
                    <Plus className="h-4 w-4 mr-2" />
                    Create Alert
                  </Button>
                </div>
                <CardDescription>Configure alerts for important events and thresholds</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="flex items-center space-x-4">
                    <Select defaultValue="all">
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Alert Type" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Types</SelectItem>
                        <SelectItem value="revenue">Revenue</SelectItem>
                        <SelectItem value="payment">Payment</SelectItem>
                        <SelectItem value="usage">Usage</SelectItem>
                        <SelectItem value="customer">Customer</SelectItem>
                      </SelectContent>
                    </Select>
                    <Select defaultValue="all">
                      <SelectTrigger className="w-40">
                        <SelectValue placeholder="Severity" />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="all">All Severities</SelectItem>
                        <SelectItem value="high">High</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="low">Low</SelectItem>
                      </SelectContent>
                    </Select>
                    <div className="relative flex-1">
                      <Search className="absolute left-3 top-3 h-4 w-4 text-gray-400" />
                      <Input placeholder="Search alerts..." className="pl-10" />
                    </div>
                  </div>

                  <div className="space-y-4">
                    {alerts.map((alert) => (
                      <div
                        key={alert.id}
                        className={`p-4 border rounded-lg ${!alert.read ? "bg-blue-50 border-blue-200" : ""}`}
                      >
                        <div className="flex justify-between items-start">
                          <div>
                            <h4 className="font-medium">{alert.title}</h4>
                            <p className="text-sm text-gray-600 mt-1">{alert.description}</p>
                          </div>
                          <div>{getAlertSeverityBadge(alert.severity)}</div>
                        </div>
                        <div className="flex justify-between items-center mt-4">
                          <span className="text-sm text-gray-500">{alert.date}</span>
                          <div className="flex items-center space-x-2">
                            <Button variant="outline" size="sm" onClick={() => handleViewAlert(alert)}>
                              View Details
                            </Button>
                            <Button variant="outline" size="sm">
                              Dismiss
                            </Button>
                          </div>
                        </div>
                      </div>
                    ))}
                  </div>
                </div>
              </CardContent>
            </Card>

            <Card>
              <CardHeader>
                <CardTitle className="text-lg">Alert Configuration</CardTitle>
                <CardDescription>Manage alert rules and notification settings</CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-6">
                  <div>
                    <h3 className="text-base font-medium mb-3">Active Alert Rules</h3>
                    <div className="overflow-x-auto">
                      <Table>
                        <TableHeader>
                          <TableRow>
                            <TableHead>Rule Name</TableHead>
                            <TableHead>Type</TableHead>
                            <TableHead>Condition</TableHead>
                            <TableHead>Threshold</TableHead>
                            <TableHead>Severity</TableHead>
                            <TableHead>Status</TableHead>
                            <TableHead>Actions</TableHead>
                          </TableRow>
                        </TableHeader>
                        <TableBody>
                          <TableRow>
                            <TableCell className="font-medium">Revenue Drop</TableCell>
                            <TableCell>Revenue</TableCell>
                            <TableCell>Decrease &gt; 10% from previous month</TableCell>
                            <TableCell>10%</TableCell>
                            <TableCell>
                              <Badge variant="destructive">High</Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant="default">Active</Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center space-x-2">
                                <Button variant="outline" size="sm">
                                  Edit
                                </Button>
                                <Button variant="outline" size="sm">
                                  Disable
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell className="font-medium">Payment Failure Rate</TableCell>
                            <TableCell>Payment</TableCell>
                            <TableCell>Failure rate &gt; 5% in 24 hours</TableCell>
                            <TableCell>5%</TableCell>
                            <TableCell>
                              <Badge variant="secondary">Medium</Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant="default">Active</Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center space-x-2">
                                <Button variant="outline" size="sm">
                                  Edit
                                </Button>
                                <Button variant="outline" size="sm">
                                  Disable
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                          <TableRow>
                            <TableCell className="font-medium">Unusual Usage Pattern</TableCell>
                            <TableCell>Usage</TableCell>
                            <TableCell>Usage spike &gt; 30% from average</TableCell>
                            <TableCell>30%</TableCell>
                            <TableCell>
                              <Badge variant="outline">Low</Badge>
                            </TableCell>
                            <TableCell>
                              <Badge variant="default">Active</Badge>
                            </TableCell>
                            <TableCell>
                              <div className="flex items-center space-x-2">
                                <Button variant="outline" size="sm">
                                  Edit
                                </Button>
                                <Button variant="outline" size="sm">
                                  Disable
                                </Button>
                              </div>
                            </TableCell>
                          </TableRow>
                        </TableBody>
                      </Table>
                    </div>
                  </div>

                  <Separator />

                  <div>
                    <h3 className="text-base font-medium mb-3">Notification Settings</h3>
                    <div className="space-y-4">
                      <div className="flex items-center justify-between">
                        <Label htmlFor="email-notifications">Email Notifications</Label>
                        <Checkbox id="email-notifications" />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="sms-notifications">SMS Notifications</Label>
                        <Checkbox id="sms-notifications" />
                      </div>
                      <div className="flex items-center justify-between">
                        <Label htmlFor="push-notifications">Push Notifications</Label>
                        <Checkbox id="push-notifications" />
                      </div>
                    </div>
                  </div>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>

        {/* Report Generation Dialog */}
        {isReportDialogOpen && (
          <div className="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50">
            <div className="flex items-center justify-center min-h-screen">
              <Card className="max-w-md w-full mx-auto">
                <CardHeader>
                  <CardTitle className="text-lg">Generate Report</CardTitle>
                  <CardDescription>Configure report parameters and export format</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="report-type">Report Type</Label>
                    <Select value={selectedReportType} onValueChange={(value) => setSelectedReportType(value)}>
                      <SelectTrigger id="report-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {mockPredefinedReports.map((report) => (
                          <SelectItem key={report.id} value={report.id}>
                            {report.name}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="date-range">Date Range</Label>
                    <Select defaultValue="last-30-days">
                      <SelectTrigger id="date-range">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="today">Today</SelectItem>
                        <SelectItem value="yesterday">Yesterday</SelectItem>
                        <SelectItem value="last-7-days">Last 7 Days</SelectItem>
                        <SelectItem value="last-30-days">Last 30 Days</SelectItem>
                        <SelectItem value="this-month">This Month</SelectItem>
                        <SelectItem value="last-month">Last Month</SelectItem>
                        <SelectItem value="custom">Custom Range</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="export-format">Export Format</Label>
                    <Select defaultValue="excel">
                      <SelectTrigger id="export-format">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="excel">Excel (.xlsx)</SelectItem>
                        <SelectItem value="csv">CSV</SelectItem>
                        <SelectItem value="pdf">PDF</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  {isGeneratingReport ? (
                    <div className="space-y-2">
                      <p>Generating Report...</p>
                      <progress value={reportProgress} max="100"></progress>
                    </div>
                  ) : (
                    <div className="flex justify-end space-x-2">
                      <Button variant="ghost" onClick={() => setIsReportDialogOpen(false)}>
                        Cancel
                      </Button>
                      <Button onClick={handleGenerateReport}>Generate Report</Button>
                    </div>
                  )}
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Alert Details Dialog */}
        {isAlertDialogOpen && selectedAlert && (
          <div className="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50">
            <div className="flex items-center justify-center min-h-screen">
              <Card className="max-w-md w-full mx-auto">
                <CardHeader>
                  <CardTitle className="text-lg">{selectedAlert.title}</CardTitle>
                  <CardDescription>{selectedAlert.description}</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label>Severity</Label>
                    {getAlertSeverityBadge(selectedAlert.severity)}
                  </div>
                  <div className="space-y-2">
                    <Label>Date</Label>
                    <p>{selectedAlert.date}</p>
                  </div>
                  <div className="flex justify-end space-x-2">
                    <Button variant="ghost" onClick={() => setIsAlertDialogOpen(false)}>
                      Close
                    </Button>
                    <Button variant="outline">Dismiss</Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}

        {/* Create Alert Dialog */}
        {isCreateAlertDialogOpen && (
          <div className="fixed inset-0 z-50 overflow-auto bg-black bg-opacity-50">
            <div className="flex items-center justify-center min-h-screen">
              <Card className="max-w-md w-full mx-auto">
                <CardHeader>
                  <CardTitle className="text-lg">Create New Alert</CardTitle>
                  <CardDescription>Define the conditions and parameters for the alert</CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="space-y-2">
                    <Label htmlFor="alert-name">Alert Name</Label>
                    <Input id="alert-name" placeholder="e.g., High Usage Alert" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="alert-type">Alert Type</Label>
                    <Select defaultValue="usage">
                      <SelectTrigger id="alert-type">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="revenue">Revenue</SelectItem>
                        <SelectItem value="payment">Payment</SelectItem>
                        <SelectItem value="usage">Usage</SelectItem>
                        <SelectItem value="customer">Customer</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="alert-condition">Condition</Label>
                    <Select defaultValue="above">
                      <SelectTrigger id="alert-condition">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="above">Above</SelectItem>
                        <SelectItem value="below">Below</SelectItem>
                        <SelectItem value="equals">Equals</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="alert-threshold">Threshold</Label>
                    <Input id="alert-threshold" type="number" placeholder="e.g., 1000" />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="alert-severity">Severity</Label>
                    <Select defaultValue="medium">
                      <SelectTrigger id="alert-severity">
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        <SelectItem value="high">High</SelectItem>
                        <SelectItem value="medium">Medium</SelectItem>
                        <SelectItem value="low">Low</SelectItem>
                      </SelectContent>
                    </Select>
                  </div>
                  <div className="flex justify-end space-x-2">
                    <Button variant="ghost" onClick={() => setIsCreateAlertDialogOpen(false)}>
                      Cancel
                    </Button>
                    <Button>Create Alert</Button>
                  </div>
                </CardContent>
              </Card>
            </div>
          </div>
        )}
      </div>
    </>
  )
}
